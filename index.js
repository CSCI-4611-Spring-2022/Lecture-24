var Z=Object.defineProperty;var _=(c,i,t)=>i in c?Z(c,i,{enumerable:!0,configurable:!0,writable:!0,value:t}):c[i]=t;var n=(c,i,t)=>(_(c,typeof i!="symbol"?i+"":i,t),t);const $=function(){const i=document.createElement("link").relList;if(i&&i.supports&&i.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))e(s);new MutationObserver(s=>{for(const r of s)if(r.type==="childList")for(const a of r.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&e(a)}).observe(document,{childList:!0,subtree:!0});function t(s){const r={};return s.integrity&&(r.integrity=s.integrity),s.referrerpolicy&&(r.referrerPolicy=s.referrerpolicy),s.crossorigin==="use-credentials"?r.credentials="include":s.crossorigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function e(s){if(s.ep)return;s.ep=!0;const r=t(s);fetch(s.href,r)}};$();const B=class{constructor(i=0,t=0,e=0,s=1){n(this,"r");n(this,"g");n(this,"b");n(this,"a");this.r=i,this.g=t,this.b=e,this.a=s}set(i,t,e,s){this.r=i,this.g=t,this.b=e,this.a=s}copy(i){this.r=i.r,this.g=i.g,this.b=i.b,this.a=i.a}};let M=B;n(M,"WHITE",new B(1,1,1)),n(M,"BLACK",new B(0,0,0)),n(M,"RED",new B(1,0,0)),n(M,"GREEN",new B(0,1,0)),n(M,"BLUE",new B(0,0,1)),n(M,"YELLOW",new B(1,1,0)),n(M,"PURPLE",new B(1,0,1)),n(M,"CYAN",new B(0,1,1));class J{constructor(i=0,t=0){n(this,"x");n(this,"y");this.x=i,this.y=t}}class j{static degreesToRadians(i){return i*Math.PI/180}static radiansToDegrees(i){return i*180/Math.PI}static rescale(i,t,e,s,r){return s+(r-s)*(i-t)/(e-t)}static clamp(i,t,e){return Math.max(t,Math.min(e,i))}}class Q{constructor(){n(this,"background");n(this,"canvas");n(this,"gl");this.canvas=document.getElementById("gfxCanvas"),this.canvas||alert("Unable to find gfxCanvas.");const i=this.canvas.getContext("webgl2");i||alert("Unable to initialize WebGL. Your browser or machine may not support it."),this.gl=i,this.gl.enable(this.gl.DEPTH_TEST),this.gl.depthFunc(this.gl.LESS),this.gl.enable(i.CULL_FACE),this.gl.cullFace(i.BACK),this.background=new M}resize(i,t,e){this.canvas.width=i,this.canvas.height=t,e>window.innerWidth/window.innerHeight?this.gl.viewport(0,(window.innerHeight-window.innerWidth/e)/2,window.innerWidth,window.innerWidth/e):this.gl.viewport((window.innerWidth-window.innerHeight*e)/2,0,window.innerHeight*e,window.innerHeight)}render(i,t){this.gl.clearColor(this.background.r,this.background.g,this.background.b,this.background.a),this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT),i.draw(t)}getNormalizedDeviceCoordinates(i,t){const e=this.gl.getParameter(this.gl.VIEWPORT);return new J(j.clamp((i-e[0])/e[2]*2-1,-1,1),j.clamp((t-e[1])/e[3]*-2+1,-1,1))}}const d=class{constructor(i=0,t=0,e=0){n(this,"x");n(this,"y");n(this,"z");this.x=i,this.y=t,this.z=e}static copy(i){return new d(i.x,i.y,i.z)}static inverse(i){return new d(-i.x,-i.y,-i.z)}static add(i,t){return new d(i.x+t.x,i.y+t.y,i.z+t.z)}static subtract(i,t){return new d(i.x-t.x,i.y-t.y,i.z-t.z)}static multiply(i,t){return new d(i.x*t.x,i.y*t.y,i.z*t.z)}static divide(i,t){return new d(i.x/t.x,i.y/t.y,i.z/t.z)}static dot(i,t){return i.x*t.x+i.y*t.y+i.z*t.z}static cross(i,t){return new d(i.y*t.z-i.z*t.y,i.z*t.x-i.x*t.z,i.x*t.y-i.y*t.x)}static multiplyScalar(i,t){return new d(i.x*t,i.y*t,i.z*t)}static divideScalar(i,t){return new d(i.x/t,i.y/t,i.z/t)}static normalize(i){const t=i.x*i.x+i.y*i.y+i.z*i.z;if(t<1e-8)return new d;const e=1/Math.sqrt(t);return new d(i.x*e,i.y*e,i.z*e)}static angleBetween(i,t){return i.angleBetween(t)}set(i,t,e){this.x=i,this.y=t,this.z=e}copy(i){this.x=i.x,this.y=i.y,this.z=i.z}clone(){return new d(this.x,this.y,this.z)}equals(i){return this.x==i.x&&this.y==i.y&&this.z==i.z}add(i){this.x+=i.x,this.y+=i.y,this.z+=i.z}subtract(i){this.x-=i.x,this.y-=i.y,this.z-=i.z}multiply(i){this.x*=i.x,this.y*=i.y,this.z*=i.z}divide(i){this.x/=i.x,this.y/=i.y,this.z/=i.z}dot(i){return this.x*i.x+this.y*i.y+this.z*i.z}cross(i){return new d(this.y*i.z-this.z*i.y,this.z*i.x-this.x*i.z,this.x*i.y-this.y*i.x)}multiplyScalar(i){this.x*=i,this.y*=i,this.z*=i}divideScalar(i){this.x/=i,this.y/=i,this.z/=i}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}normalize(){const i=this.x*this.x+this.y*this.y+this.z*this.z;if(i<1e-8)return;const t=1/Math.sqrt(i);this.x*=t,this.y*=t,this.z*=t}invert(){this.x=-this.x,this.y=-this.y,this.z=-this.z}inverse(){return new d(-this.x,-this.y,-this.z)}applyMatrix(i){const t=this.clone(),e=1/(i.mat[3]*t.x+i.mat[7]*t.y+i.mat[11]*t.z+i.mat[15]);this.x=e*(i.mat[0]*t.x+i.mat[4]*t.y+i.mat[8]*t.z+i.mat[12]),this.y=e*(i.mat[1]*t.x+i.mat[5]*t.y+i.mat[9]*t.z+i.mat[13]),this.z=e*(i.mat[2]*t.x+i.mat[6]*t.y+i.mat[10]*t.z+i.mat[14])}rotate(i){this.copy(i.rotate(this))}angleBetween(i){const t=d.normalize(this),e=d.normalize(i);return Math.acos(t.dot(e))}setPositionFromMatrix(i){this.x=i.mat[12],this.y=i.mat[13],this.z=i.mat[14]}};let m=d;n(m,"ZERO",new d(0,0,0)),n(m,"ONE",new d(1,1,1)),n(m,"UP",new d(0,1,0)),n(m,"DOWN",new d(0,-1,0)),n(m,"LEFT",new d(-1,0,0)),n(m,"RIGHT",new d(1,0,0)),n(m,"FORWARD",new d(0,0,-1)),n(m,"BACK",new d(0,0,1)),n(m,"X_AXIS",d.RIGHT),n(m,"Y_AXIS",d.UP),n(m,"Z_AXIS",d.FORWARD);const b=class{constructor(i=0,t=0,e=0,s=1){n(this,"x");n(this,"y");n(this,"z");n(this,"w");this.x=i,this.y=t,this.z=e,this.w=s}static multiply(i,t){const e=new b;return e.w=i.w*t.w-i.x*t.x-i.y*t.y-i.z*t.z,e.x=i.w*t.x+i.x*t.w+i.y*t.z-i.z*t.y,e.y=i.w*t.y+i.y*t.w+i.z*t.x-i.x*t.z,e.z=i.w*t.z+i.z*t.w+i.x*t.y-i.y*t.x,e}static normalize(i){const t=i.clone();return t.normalize(),t}static inverse(i){const t=i.clone();return t.invert(),t}static makeRotationX(i){const t=new b;return t.setRotationX(i),t}static makeRotationY(i){const t=new b;return t.setRotationY(i),t}static makeRotationZ(i){const t=new b;return t.setRotationZ(i),t}static makeAxisAngle(i,t){const e=new b;return e.setAxisAngle(i,t),e}static makeEulerAngles(i,t,e){const s=new b;return s.setEulerAngles(i,t,e),s}static makeMatrix(i){const t=new b;return t.setMatrix(i),t}set(i,t,e,s){this.x=i,this.y=t,this.z=e,this.w=s}setRotationX(i){this.w=Math.cos(i/2),this.x=Math.sin(i/2),this.y=0,this.z=0}setRotationY(i){this.w=Math.cos(i/2),this.x=0,this.y=Math.sin(i/2),this.z=0}setRotationZ(i){this.w=Math.cos(i/2),this.x=0,this.y=0,this.z=Math.sin(i/2)}setAxisAngle(i,t){const e=Math.sin(t/2);this.w=Math.cos(t/2),this.x=e*i.x,this.y=e*i.y,this.z=e*i.z}setEulerAngles(i,t,e){const s=Math.cos(t/2),r=Math.sin(t/2),a=Math.cos(i/2),o=Math.sin(i/2),l=Math.cos(-e/2),u=Math.sin(-e/2);this.x=r*a*l+s*o*u,this.y=s*o*l-r*a*u,this.z=s*a*u+r*o*l,this.w=s*a*l-r*o*u}setMatrix(i){this.w=Math.sqrt(1+i.mat[0]+i.mat[5]+i.mat[10])/2,this.x=(i.mat[6]-i.mat[9])/(4*this.w),this.y=(i.mat[8]-i.mat[2])/(4*this.w),this.z=(i.mat[1]-i.mat[4])/(4*this.w)}copy(i){this.x=i.x,this.y=i.y,this.z=i.z,this.w=i.w}clone(){return new b(this.x,this.y,this.z,this.w)}multiply(i){this.copy(b.multiply(i,this))}normalize(){const i=1/Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);this.x*=i,this.y*=i,this.z*=i,this.w*=i}rotate(i){const t=new m(this.x,this.y,this.z),e=m.multiplyScalar(t,2*t.dot(i));e.add(m.multiplyScalar(i,this.w*this.w-t.dot(t)));const s=t.cross(i);return s.multiplyScalar(2*this.w),e.add(s),e}invert(){const i=1/(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);this.x*=-i,this.y*=-i,this.z*=-i,this.w*=i}inverse(){return b.inverse(this)}getMatrix(){const i=this.w*this.w,t=this.x*this.x,e=this.y*this.y,s=this.z*this.z,r=1/(t+e+s+i),a=this.x*this.y,o=this.z*this.w,l=this.x*this.z,u=this.y*this.w,f=this.y*this.z,A=this.x*this.w;return z.fromRowMajor((t-e-s+i)*r,2*(a-o)*r,2*(l+u)*r,0,2*(a+o)*r,(-t+e-s+i)*r,2*(f-A)*r,0,2*(l-u)*r,2*(f+A)*r,-t-e+s+i,0,0,0,0,1)}};let I=b;n(I,"IDENTITY",new b);const g=class{constructor(){n(this,"mat");this.mat=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}static multiply(i,t){const e=new g;e.mat[0]=0,e.mat[5]=0,e.mat[10]=0,e.mat[15]=0;for(let s=0;s<4;s++)for(let r=0;r<4;r++)for(let a=0;a<4;a++)e.mat[s*4+r]+=i.mat[s*4+a]*t.mat[a*4+r];return e}static copy(i){const t=new g;return t.copy(i),t}static fromRowMajor(i,t,e,s,r,a,o,l,u,f,A,h,R,w,y,E){const D=new g;return D.setRowMajor(i,t,e,s,r,a,o,l,u,f,A,h,R,w,y,E),D}static fromColumnMajor(i,t,e,s,r,a,o,l,u,f,A,h,R,w,y,E){const D=new g;return D.setColumnMajor(i,t,e,s,r,a,o,l,u,f,A,h,R,w,y,E),D}static makeTranslation(i){return g.fromRowMajor(1,0,0,i.x,0,1,0,i.y,0,0,1,i.z,0,0,0,1)}static makeRotationX(i){const t=new g;return t.makeRotationX(i),t}static makeRotationY(i){const t=new g;return t.makeRotationY(i),t}static makeRotationZ(i){const t=new g;return t.makeRotationZ(i),t}static makeRotation(i,t){const e=new g;return e.makeRotation(i,t),e}static makeScale(i){const t=new g;return t.makeScale(i),t}static makeTransform(i=m.ZERO,t=I.IDENTITY,e=m.UP){const s=new g;return s.makeTransform(i,t,e),s}static lookAt(i,t,e){const s=new g;return s.lookAt(i,t,e),s}static makePerspective(i,t,e,s){const r=e*Math.tan(i*Math.PI/360),a=r*t;return g.makeFrustum(-a,a,-r,r,e,s)}static makeFrustum(i,t,e,s,r,a){return g.fromRowMajor(2*r/(t-i),0,(t+i)/(t-i),0,0,2*r/(s-e),(s+e)/(s-e),0,0,0,-(a+r)/(a-r),-2*a*r/(a-r),0,0,-1,0)}setColumnMajor(i,t,e,s,r,a,o,l,u,f,A,h,R,w,y,E){this.mat[0]=i,this.mat[1]=t,this.mat[2]=e,this.mat[3]=s,this.mat[4]=r,this.mat[5]=a,this.mat[6]=o,this.mat[7]=l,this.mat[8]=u,this.mat[9]=f,this.mat[10]=A,this.mat[11]=h,this.mat[12]=R,this.mat[13]=w,this.mat[14]=y,this.mat[15]=E}setRowMajor(i,t,e,s,r,a,o,l,u,f,A,h,R,w,y,E){this.mat[0]=i,this.mat[1]=r,this.mat[2]=u,this.mat[3]=R,this.mat[4]=t,this.mat[5]=a,this.mat[6]=f,this.mat[7]=w,this.mat[8]=e,this.mat[9]=o,this.mat[10]=A,this.mat[11]=y,this.mat[12]=s,this.mat[13]=l,this.mat[14]=h,this.mat[15]=E}copy(i){for(let t=0;t<16;t++)this.mat[t]=i.mat[t]}element(i,t){return this.mat[t*4+i]}set(i,t,e){this.mat[e*4+t]=i}multiply(i){const t=g.multiply(i,this);this.copy(t)}makeTranslation(i){this.setRowMajor(1,0,0,i.x,0,1,0,i.y,0,0,1,i.z,0,0,0,1)}makeRotationX(i){const t=Math.cos(i),e=Math.sin(i);this.setRowMajor(1,0,0,0,0,t,-e,0,0,e,t,0,0,0,0,1)}makeRotationY(i){const t=Math.cos(i),e=Math.sin(i);this.setRowMajor(t,0,e,0,0,1,0,0,-e,0,t,0,0,0,0,1)}makeRotationZ(i){const t=Math.cos(i),e=Math.sin(i);this.setRowMajor(t,-e,0,0,e,t,0,0,0,0,1,0,0,0,0,1)}makeRotation(i,t){const e=Math.cos(t),s=Math.sin(t),r=1-e,a=i.x,o=i.y,l=i.z,u=r*a,f=r*o;this.setRowMajor(u*a+e,u*o-s*l,u*l+s*o,0,u*o+s*l,f*o+e,f*l-s*a,0,u*l-s*o,f*l+s*a,r*l*l+e,0,0,0,0,1)}makeScale(i){this.setRowMajor(i.x,0,0,0,0,i.y,0,0,0,0,i.z,0,0,0,0,1)}makePerspective(i,t,e,s){const r=e*Math.tan(i*Math.PI/360),a=r*t;this.makeFrustum(-a,a,-r,r,e,s)}makeFrustum(i,t,e,s,r,a){this.setRowMajor(2*r/(t-i),0,(t+i)/(t-i),0,0,2*r/(s-e),(s+e)/(s-e),0,0,0,-(a+r)/(a-r),-2*a*r/(a-r),0,0,-1,0)}makeTransform(i=m.ZERO,t=I.IDENTITY,e=m.UP){this.makeTranslation(i),this.multiply(t.getMatrix()),this.multiply(g.makeScale(e))}lookAt(i,t,e=m.UP){const s=m.subtract(i,t);s.normalize();const r=m.cross(e,s);r.normalize();const a=m.cross(s,r),o=g.fromRowMajor(r.x,a.x,s.x,0,r.y,a.y,s.y,0,r.z,a.z,s.z,0,0,0,0,1),l=g.makeTranslation(i);this.copy(g.multiply(o,l))}multiplyScalar(i){for(let t=0;t<16;t++)this.mat[t]*=i}determinant(){return this.mat[3]*this.mat[6]*this.mat[9]*this.mat[12]-this.mat[2]*this.mat[7]*this.mat[9]*this.mat[12]-this.mat[3]*this.mat[5]*this.mat[10]*this.mat[12]+this.mat[1]*this.mat[7]*this.mat[10]*this.mat[12]+this.mat[2]*this.mat[5]*this.mat[11]*this.mat[12]-this.mat[1]*this.mat[6]*this.mat[11]*this.mat[12]-this.mat[3]*this.mat[6]*this.mat[8]*this.mat[13]+this.mat[2]*this.mat[7]*this.mat[8]*this.mat[13]+this.mat[3]*this.mat[4]*this.mat[10]*this.mat[13]-this.mat[0]*this.mat[7]*this.mat[10]*this.mat[13]-this.mat[2]*this.mat[4]*this.mat[11]*this.mat[13]+this.mat[0]*this.mat[6]*this.mat[11]*this.mat[13]+this.mat[3]*this.mat[5]*this.mat[8]*this.mat[14]-this.mat[1]*this.mat[7]*this.mat[8]*this.mat[14]-this.mat[3]*this.mat[4]*this.mat[9]*this.mat[14]+this.mat[0]*this.mat[7]*this.mat[9]*this.mat[14]+this.mat[1]*this.mat[4]*this.mat[11]*this.mat[14]-this.mat[0]*this.mat[5]*this.mat[11]*this.mat[14]-this.mat[2]*this.mat[5]*this.mat[8]*this.mat[15]+this.mat[1]*this.mat[6]*this.mat[8]*this.mat[15]+this.mat[2]*this.mat[4]*this.mat[9]*this.mat[15]-this.mat[0]*this.mat[6]*this.mat[9]*this.mat[15]-this.mat[1]*this.mat[4]*this.mat[10]*this.mat[15]+this.mat[0]*this.mat[5]*this.mat[10]*this.mat[15]}inverse(){const i=this.determinant();if(Math.abs(i)<1e-8)return new g;const t=new g;return t.mat[0]=(this.mat[6]*this.mat[11]*this.mat[13]-this.mat[7]*this.mat[10]*this.mat[13]+this.mat[7]*this.mat[9]*this.mat[14]-this.mat[5]*this.mat[11]*this.mat[14]-this.mat[6]*this.mat[9]*this.mat[15]+this.mat[5]*this.mat[10]*this.mat[15])/i,t.mat[1]=(this.mat[3]*this.mat[10]*this.mat[13]-this.mat[2]*this.mat[11]*this.mat[13]-this.mat[3]*this.mat[9]*this.mat[14]+this.mat[1]*this.mat[11]*this.mat[14]+this.mat[2]*this.mat[9]*this.mat[15]-this.mat[1]*this.mat[10]*this.mat[15])/i,t.mat[2]=(this.mat[2]*this.mat[7]*this.mat[13]-this.mat[3]*this.mat[6]*this.mat[13]+this.mat[3]*this.mat[5]*this.mat[14]-this.mat[1]*this.mat[7]*this.mat[14]-this.mat[2]*this.mat[5]*this.mat[15]+this.mat[1]*this.mat[6]*this.mat[15])/i,t.mat[3]=(this.mat[3]*this.mat[6]*this.mat[9]-this.mat[2]*this.mat[7]*this.mat[9]-this.mat[3]*this.mat[5]*this.mat[10]+this.mat[1]*this.mat[7]*this.mat[10]+this.mat[2]*this.mat[5]*this.mat[11]-this.mat[1]*this.mat[6]*this.mat[11])/i,t.mat[4]=(this.mat[7]*this.mat[10]*this.mat[12]-this.mat[6]*this.mat[11]*this.mat[12]-this.mat[7]*this.mat[8]*this.mat[14]+this.mat[4]*this.mat[11]*this.mat[14]+this.mat[6]*this.mat[8]*this.mat[15]-this.mat[4]*this.mat[10]*this.mat[15])/i,t.mat[5]=(this.mat[2]*this.mat[11]*this.mat[12]-this.mat[3]*this.mat[10]*this.mat[12]+this.mat[3]*this.mat[8]*this.mat[14]-this.mat[0]*this.mat[11]*this.mat[14]-this.mat[2]*this.mat[8]*this.mat[15]+this.mat[0]*this.mat[10]*this.mat[15])/i,t.mat[6]=(this.mat[3]*this.mat[6]*this.mat[12]-this.mat[2]*this.mat[7]*this.mat[12]-this.mat[3]*this.mat[4]*this.mat[14]+this.mat[0]*this.mat[7]*this.mat[14]+this.mat[2]*this.mat[4]*this.mat[15]-this.mat[0]*this.mat[6]*this.mat[15])/i,t.mat[7]=(this.mat[2]*this.mat[7]*this.mat[8]-this.mat[3]*this.mat[6]*this.mat[8]+this.mat[3]*this.mat[4]*this.mat[10]-this.mat[0]*this.mat[7]*this.mat[10]-this.mat[2]*this.mat[4]*this.mat[11]+this.mat[0]*this.mat[6]*this.mat[11])/i,t.mat[8]=(this.mat[5]*this.mat[11]*this.mat[12]-this.mat[7]*this.mat[9]*this.mat[12]+this.mat[7]*this.mat[8]*this.mat[13]-this.mat[4]*this.mat[11]*this.mat[13]-this.mat[5]*this.mat[8]*this.mat[15]+this.mat[4]*this.mat[9]*this.mat[15])/i,t.mat[9]=(this.mat[3]*this.mat[9]*this.mat[12]-this.mat[1]*this.mat[11]*this.mat[12]-this.mat[3]*this.mat[8]*this.mat[13]+this.mat[0]*this.mat[11]*this.mat[13]+this.mat[1]*this.mat[8]*this.mat[15]-this.mat[0]*this.mat[9]*this.mat[15])/i,t.mat[10]=(this.mat[1]*this.mat[7]*this.mat[12]-this.mat[3]*this.mat[5]*this.mat[12]+this.mat[3]*this.mat[4]*this.mat[13]-this.mat[0]*this.mat[7]*this.mat[13]-this.mat[1]*this.mat[4]*this.mat[15]+this.mat[0]*this.mat[5]*this.mat[15])/i,t.mat[11]=(this.mat[3]*this.mat[5]*this.mat[8]-this.mat[1]*this.mat[7]*this.mat[8]-this.mat[3]*this.mat[4]*this.mat[9]+this.mat[0]*this.mat[7]*this.mat[9]+this.mat[1]*this.mat[4]*this.mat[11]-this.mat[0]*this.mat[5]*this.mat[11])/i,t.mat[12]=(this.mat[6]*this.mat[9]*this.mat[12]-this.mat[5]*this.mat[10]*this.mat[12]-this.mat[6]*this.mat[8]*this.mat[13]+this.mat[4]*this.mat[10]*this.mat[13]+this.mat[5]*this.mat[8]*this.mat[14]-this.mat[4]*this.mat[9]*this.mat[14])/i,t.mat[13]=(this.mat[1]*this.mat[10]*this.mat[12]-this.mat[2]*this.mat[9]*this.mat[12]+this.mat[2]*this.mat[8]*this.mat[13]-this.mat[0]*this.mat[10]*this.mat[13]-this.mat[1]*this.mat[8]*this.mat[14]+this.mat[0]*this.mat[9]*this.mat[14])/i,t.mat[14]=(this.mat[2]*this.mat[5]*this.mat[12]-this.mat[1]*this.mat[6]*this.mat[12]-this.mat[2]*this.mat[4]*this.mat[13]+this.mat[0]*this.mat[6]*this.mat[13]+this.mat[1]*this.mat[4]*this.mat[14]-this.mat[0]*this.mat[5]*this.mat[14])/i,t.mat[15]=(this.mat[1]*this.mat[6]*this.mat[8]-this.mat[2]*this.mat[5]*this.mat[8]+this.mat[2]*this.mat[4]*this.mat[9]-this.mat[0]*this.mat[6]*this.mat[9]-this.mat[1]*this.mat[4]*this.mat[10]+this.mat[0]*this.mat[5]*this.mat[10])/i,t}invert(){const i=this.inverse();this.copy(i)}transpose(){return g.fromRowMajor(this.mat[0],this.mat[1],this.mat[2],this.mat[3],this.mat[4],this.mat[5],this.mat[6],this.mat[7],this.mat[8],this.mat[9],this.mat[10],this.mat[11],this.mat[12],this.mat[13],this.mat[14],this.mat[15])}};let z=g;n(z,"IDENTITY",new g);class L{constructor(){n(this,"children");n(this,"position");n(this,"rotation");n(this,"scale");n(this,"visible");n(this,"matrix");n(this,"worldMatrix");this.children=[],this.position=new m,this.rotation=new I,this.scale=new m(1,1,1),this.visible=!0,this.matrix=new z,this.worldMatrix=new z}draw(i,t,e){!this.visible||this.children.forEach(s=>{s.draw(this,t,e)})}postRender(){this.children.forEach(i=>{i.postRender()})}computeWorldTransform(i){this.matrix.makeTransform(this.position,this.rotation,this.scale),this.worldMatrix.copy(i.worldMatrix),this.worldMatrix.multiply(this.matrix),this.children.forEach(t=>{t.computeWorldTransform(this)})}add(i){this.children.push(i)}remove(i){const t=this.children.indexOf(i);return t==-1?null:this.children.splice(t,1)[0]}setLights(i){this.children.forEach(t=>{t.setLights(i)})}translate(i){this.position.add(this.rotation.rotate(i))}translateX(i){this.position.add(this.rotation.rotate(new m(i,0,0)))}translateY(i){this.position.add(this.rotation.rotate(new m(0,i,0)))}translateZ(i){this.position.add(this.rotation.rotate(new m(0,0,i)))}lookAt(i,t=m.UP){const e=z.lookAt(this.position,i,t);this.rotation.setMatrix(e)}getWorldMatrix(){return this.worldMatrix}getLocalMatrix(){return this.matrix}}class X extends L{constructor(t=60,e=1920/1080,s=.1,r=100){super();n(this,"projectionMatrix");n(this,"viewMatrix");n(this,"fov");n(this,"aspectRatio");n(this,"near");n(this,"far");this.projectionMatrix=new z,this.viewMatrix=new z,this.fov=t,this.aspectRatio=e,this.near=s,this.far=r,this.projectionMatrix.makePerspective(t,e,s,r)}getProjectionMatrix(){return this.projectionMatrix}getViewMatrix(){return this.viewMatrix}setPerspectiveCamera(t,e,s,r){this.fov=t,this.aspectRatio=e,this.near=s,this.far=r,this.projectionMatrix.makePerspective(t,e,s,r)}computeWorldTransform(t){super.computeWorldTransform(t),this.viewMatrix=this.worldMatrix.inverse()}getFov(){return this.fov}getAspectRatio(){return this.aspectRatio}getNear(){return this.near}getFar(){return this.far}onMouseDown(t){}onMouseUp(t){}onMouseMove(t){}onMouseWheel(t){}onKeyDown(t){}onKeyUp(t){}}class q{constructor(){n(this,"lights");n(this,"lightTypes");n(this,"lightPositions");n(this,"ambientIntensities");n(this,"diffuseIntensities");n(this,"specularIntensities");this.lights=[],this.lightTypes=[],this.lightPositions=[],this.ambientIntensities=[],this.diffuseIntensities=[],this.specularIntensities=[]}clear(){this.lights=[],this.lightTypes=[],this.lightPositions=[],this.ambientIntensities=[],this.diffuseIntensities=[],this.specularIntensities=[]}addLight(i){this.lights.some(e=>e==i)||this.lights.push(i)}getNumLights(){return this.lights.length}updateLights(){this.lights.forEach(i=>{if(i.visible){const t=new m;t.applyMatrix(i.getWorldMatrix()),this.lightPositions.push(t.x,t.y,t.z),this.lightTypes.push(i.getType()),this.ambientIntensities.push(i.ambientIntensity.r,i.ambientIntensity.g,i.ambientIntensity.b),this.diffuseIntensities.push(i.diffuseIntensity.r,i.diffuseIntensity.g,i.diffuseIntensity.b),this.specularIntensities.push(i.specularIntensity.r,i.specularIntensity.g,i.specularIntensity.b)}else{const t=new m;t.applyMatrix(i.getWorldMatrix()),this.lightPositions.push(t.x,t.y,t.z),this.lightTypes.push(i.getType()),this.ambientIntensities.push(0,0,0),this.diffuseIntensities.push(0,0,0),this.specularIntensities.push(0,0,0)}})}}class tt{constructor(){n(this,"root");n(this,"lightManager");this.root=new L,this.lightManager=new q}draw(i){i.computeWorldTransform(this.root),this.computeWorldTransforms(),this.lightManager.clear(),this.root.setLights(this.lightManager),this.lightManager.updateLights(),this.root.children.forEach(t=>{t.draw(this.root,i,this.lightManager)})}postRender(){this.root.children.forEach(i=>{i.postRender()})}add(i){this.root.add(i)}remove(i){this.root.remove(i)}computeWorldTransforms(){this.root.children.forEach(i=>{i.computeWorldTransform(this.root)})}}const S=class{constructor(){n(this,"renderer");n(this,"camera");n(this,"scene");n(this,"time");S.instance=this,this.time=Date.now(),this.camera=new X,this.scene=new tt,this.renderer=new Q,this.renderer.resize(window.innerWidth,window.innerHeight,this.camera.getAspectRatio()),window.addEventListener("resize",()=>{this.resize()},!1),window.addEventListener("mousedown",i=>{this.onMouseDownEventHandler(i)}),window.addEventListener("mouseup",i=>{this.onMouseUpEventHandler(i)}),window.addEventListener("mousemove",i=>{this.onMouseMoveEventHandler(i)}),window.addEventListener("wheel",i=>{this.onMouseWheelEventHandler(i)}),window.addEventListener("keydown",i=>{this.onKeyDownEventHandler(i)}),window.addEventListener("keyup",i=>{this.onKeyUpEventHandler(i)})}static getInstance(){return S.instance}start(){this.createScene(),this.mainLoop()}mainLoop(){this.update((Date.now()-this.time)/1e3),this.renderer.render(this.scene,this.camera),this.scene.postRender(),window.requestAnimationFrame(()=>this.mainLoop())}resize(){this.renderer.resize(window.innerWidth,window.innerHeight,this.camera.getAspectRatio())}onMouseDown(i){}onMouseUp(i){}onMouseMove(i){}onMouseWheel(i){}onKeyDown(i){}onKeyUp(i){}onMouseDownEventHandler(i){this.camera.onMouseDown(i),this.onMouseDown(i)}onMouseUpEventHandler(i){this.camera.onMouseUp(i),this.onMouseUp(i)}onMouseMoveEventHandler(i){this.camera.onMouseMove(i),this.onMouseMove(i)}onMouseWheelEventHandler(i){this.camera.onMouseWheel(i),this.onMouseWheel(i)}onKeyDownEventHandler(i){this.camera.onKeyDown(i),this.onKeyDown(i)}onKeyUpEventHandler(i){this.camera.onKeyUp(i),this.onKeyUp(i)}};let F=S;n(F,"instance");class it extends X{constructor(t=1,e=60,s=1920/1080,r=.1,a=100){super(e,s,r,a);n(this,"mouseDrag");n(this,"cameraOrbitX");n(this,"cameraOrbitY");n(this,"cameraDistance");this.mouseDrag=!1,this.cameraOrbitX=new I,this.cameraOrbitY=new I,this.cameraDistance=t,this.updateCameraOrbit()}onMouseDown(t){t.target.localName=="canvas"&&(this.mouseDrag=!0)}onMouseUp(t){this.mouseDrag=!1}onMouseMove(t){this.mouseDrag&&(this.cameraOrbitX.multiply(I.makeRotationX(-t.movementY*Math.PI/180)),this.cameraOrbitY.multiply(I.makeRotationY(-t.movementX*Math.PI/180)),this.updateCameraOrbit())}onMouseWheel(t){this.cameraDistance+=t.deltaY/1e3,this.updateCameraOrbit()}updateCameraOrbit(){this.rotation.copy(this.cameraOrbitX),this.rotation.multiply(this.cameraOrbitY),this.position.set(0,0,this.cameraDistance),this.position.rotate(this.rotation)}}class st{constructor(i=new m,t=new m(0,0,-1)){n(this,"origin");n(this,"direction");this.origin=i,this.direction=t}set(i,t){this.origin=i,this.direction=t}}class et{constructor(i=new st){n(this,"ray");this.ray=i}setPickRay(i,t){this.ray.origin.copy(t.position),this.ray.direction.set(i.x,i.y,-1),this.ray.direction.applyMatrix(t.getProjectionMatrix().inverse()),this.ray.direction.applyMatrix(t.getWorldMatrix()),this.ray.direction.subtract(this.ray.origin),this.ray.direction.normalize()}intersectsPlane(i){const t=this.ray.direction.dot(i.normal);if(Math.abs(t)>1e-6){const s=m.subtract(i.point,this.ray.origin).dot(i.normal)/t;if(s>0){const r=m.multiplyScalar(this.ray.direction,s);return r.add(this.ray.origin),r}}return null}intersectsSphere(i){const t=m.subtract(i.center,this.ray.origin),e=t.dot(this.ray.direction),s=i.radius*i.radius,r=t.dot(t)-e*e;if(r>s)return null;const a=Math.sqrt(s-r),o=e-a,l=e+a;if(o<0&&l<0)return null;const u=this.ray.direction.clone();return o<l?u.multiplyScalar(o):u.multiplyScalar(l),u.add(this.ray.origin),u}intersectsBox(i){let t=(i.min.x-this.ray.origin.x)/this.ray.direction.x,e=(i.max.x-this.ray.origin.x)/this.ray.direction.x;if(t>e){const u=t;t=e,e=u}let s=(i.min.y-this.ray.origin.y)/this.ray.direction.y,r=(i.max.y-this.ray.origin.y)/this.ray.direction.y;if(s>r){const u=s;s=r,r=u}if(t>r||s>e)return null;s>t&&(t=s),r<e&&(e=r);let a=(i.min.z-this.ray.origin.z)/this.ray.direction.z,o=(i.max.z-this.ray.origin.z)/this.ray.direction.z;if(a>o){const u=a;a=o,o=u}if(t>o||a>e)return null;a>t&&(t=a),o<e&&(e=o);const l=m.multiplyScalar(this.ray.direction,t);return l.add(this.ray.origin),l}}const v=class{constructor(i=0,t=0,e=0){n(this,"r");n(this,"g");n(this,"b");this.r=i,this.g=t,this.b=e}set(i,t,e){this.r=i,this.g=t,this.b=e}copy(i){this.r=i.r,this.g=i.g,this.b=i.b}};let x=v;n(x,"WHITE",new v(1,1,1)),n(x,"BLACK",new v(0,0,0)),n(x,"RED",new v(1,0,0)),n(x,"GREEN",new v(0,1,0)),n(x,"BLUE",new v(0,0,1)),n(x,"YELLOW",new v(1,1,0)),n(x,"PURPLE",new v(1,0,1)),n(x,"CYAN",new v(0,1,1));class rt{constructor(i=new m(-.5,-.5,-.5),t=new m(.5,.5,.5)){n(this,"min");n(this,"max");this.min=i,this.max=t}}class nt{constructor(i=new m,t=1){n(this,"center");n(this,"radius");this.center=i,this.radius=t}}class at{constructor(i=new m,t=new m(0,0,-1)){n(this,"point");n(this,"normal");this.point=i,this.normal=t}}var ht=`#version 300 es

precision mediump float;

#define POINT_LIGHT 0
#define DIRECTIONAL_LIGHT 1

const int MAX_LIGHTS = 16;

uniform mat4 modelMatrix;
uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 normalMatrix;
uniform vec3 eyePosition;

uniform int numLights;
uniform int lightTypes[MAX_LIGHTS];
uniform vec3 lightPositions[MAX_LIGHTS];
uniform vec3 ambientIntensities[MAX_LIGHTS];
uniform vec3 diffuseIntensities[MAX_LIGHTS];
uniform vec3 specularIntensities[MAX_LIGHTS];

uniform vec3 kAmbient;
uniform vec3 kDiffuse;
uniform vec3 kSpecular;
uniform float shininess;

in vec3 position;
in vec3 normal;
in vec4 color;
in vec2 texCoord;

out vec4 vertColor;
out vec2 uv;

void main() 
{
    
    vec3 worldPosition = (modelMatrix * vec4(position, 1)).xyz;

    vec3 illumination = vec3(0, 0, 0);
    for(int i=0; i < numLights; i++)
    {
        
        illumination += kAmbient * ambientIntensities[i];
        
        
        vec3 n = normalize((normalMatrix * vec4(normal, 0)).xyz);

        
        vec3 l;
        if(lightTypes[i] == DIRECTIONAL_LIGHT)
            l = normalize(lightPositions[i]);
        else
            l = normalize(lightPositions[i] - worldPosition);

        
        float diffuseComponent = max(dot(n, l), 0.0);
        illumination += diffuseComponent * kDiffuse * diffuseIntensities[i];

        
        vec3 e = normalize(eyePosition - worldPosition);

        
        vec3 r = reflect(-l, n);

        
        float specularComponent = pow(max(dot(e, r), 0.0), shininess);
        illumination += specularComponent * kSpecular * specularIntensities[i];
    }

    vertColor = color;
    vertColor.rgb *= illumination;

    uv = texCoord.xy; 

    gl_Position = projectionMatrix * viewMatrix * vec4(worldPosition, 1);
}`,ot=`#version 300 es

precision mediump float;

uniform int useTexture;
uniform sampler2D textureImage;

in vec4 vertColor;
in vec2 uv;

out vec4 fragColor;

void main() 
{
    fragColor = vertColor;

    if(useTexture != 0)
    {
        fragColor *= texture(textureImage, uv);
    }
}`,K=(c=>(c[c.FRONT=0]="FRONT",c[c.BACK=1]="BACK",c[c.DOUBLE=2]="DOUBLE",c))(K||{});class N{constructor(){n(this,"visible");n(this,"side");n(this,"gl");this.visible=!0,this.side=0,this.gl=F.getInstance().renderer.gl}initialize(){if(this.side==2){this.gl.disable(this.gl.CULL_FACE);return}this.gl.enable(this.gl.CULL_FACE),this.side==0?this.gl.cullFace(this.gl.BACK):this.gl.cullFace(this.gl.FRONT)}}class O{constructor(i,t){n(this,"vertexShader");n(this,"fragmentShader");n(this,"shaderProgram");n(this,"vertexSource");n(this,"fragmentSource");n(this,"initialized");this.vertexSource=i,this.fragmentSource=t,this.vertexShader=null,this.fragmentShader=null,this.shaderProgram=null,this.initialized=!1}initialize(i){this.initialized||(this.initialized=!0,this.vertexShader=this.createVertexShader(i,this.vertexSource),this.fragmentShader=this.createFragmentShader(i,this.fragmentSource),this.vertexShader&&this.fragmentShader&&(this.shaderProgram=this.createShaderProgram(i,this.vertexShader,this.fragmentShader)))}createVertexShader(i,t){const e=i.createShader(i.VERTEX_SHADER);return e?(i.shaderSource(e,t),i.compileShader(e),i.getShaderParameter(e,i.COMPILE_STATUS)||(console.error("Error: unable to load vertex shader"),console.error(i.getShaderInfoLog(e)))):console.error("Error: unable to create vertex shader"),e}createFragmentShader(i,t){const e=i.createShader(i.FRAGMENT_SHADER);return e?(i.shaderSource(e,t),i.compileShader(e),i.getShaderParameter(e,i.COMPILE_STATUS)||(console.error("Error: unable to load fragment shader"),console.error(i.getShaderInfoLog(e)))):console.error("Error: unable to create fragment shader"),e}createShaderProgram(i,t,e){let s=null;if(t&&e){if(s=i.createProgram(),!s)return console.error("Error: could not create shader program"),null;if(i.attachShader(s,t),i.attachShader(s,e),i.linkProgram(s),!i.getProgramParameter(s,i.LINK_STATUS))return console.error("Error: could not link shader program"),console.error(i.getProgramInfoLog(s)),null}return s}getProgram(){return this.shaderProgram}getAttribute(i,t){return this.shaderProgram?i.getAttribLocation(this.shaderProgram,t):-1}getUniform(i,t){return this.shaderProgram?i.getUniformLocation(this.shaderProgram,t):null}}const p=class extends N{constructor(){super();n(this,"texture");n(this,"ambientColor");n(this,"diffuseColor");n(this,"specularColor");n(this,"shininess");n(this,"kAmbientUniform");n(this,"kDiffuseUniform");n(this,"kSpecularUniform");n(this,"shininessUniform");n(this,"textureUniform");n(this,"useTextureUniform");n(this,"eyePositionUniform");n(this,"modelUniform");n(this,"viewUniform");n(this,"projectionUniform");n(this,"normalUniform");n(this,"numLightsUniform");n(this,"lightTypesUniform");n(this,"lightPositionsUniform");n(this,"ambientIntensitiesUniform");n(this,"diffuseIntensitiesUniform");n(this,"specularIntensitiesUniform");n(this,"positionAttribute");n(this,"normalAttribute");n(this,"colorAttribute");n(this,"texCoordAttribute");this.texture=null,this.ambientColor=new x(1,1,1),this.diffuseColor=new x(1,1,1),this.specularColor=new x(0,0,0),this.shininess=30,p.shader.initialize(this.gl),this.kAmbientUniform=p.shader.getUniform(this.gl,"kAmbient"),this.kDiffuseUniform=p.shader.getUniform(this.gl,"kDiffuse"),this.kSpecularUniform=p.shader.getUniform(this.gl,"kSpecular"),this.shininessUniform=p.shader.getUniform(this.gl,"shininess"),this.textureUniform=p.shader.getUniform(this.gl,"textureImage"),this.useTextureUniform=p.shader.getUniform(this.gl,"useTexture"),this.eyePositionUniform=p.shader.getUniform(this.gl,"eyePosition"),this.viewUniform=p.shader.getUniform(this.gl,"viewMatrix"),this.modelUniform=p.shader.getUniform(this.gl,"modelMatrix"),this.projectionUniform=p.shader.getUniform(this.gl,"projectionMatrix"),this.normalUniform=p.shader.getUniform(this.gl,"normalMatrix"),this.numLightsUniform=p.shader.getUniform(this.gl,"numLights"),this.lightTypesUniform=p.shader.getUniform(this.gl,"lightTypes"),this.lightPositionsUniform=p.shader.getUniform(this.gl,"lightPositions"),this.ambientIntensitiesUniform=p.shader.getUniform(this.gl,"ambientIntensities"),this.diffuseIntensitiesUniform=p.shader.getUniform(this.gl,"diffuseIntensities"),this.specularIntensitiesUniform=p.shader.getUniform(this.gl,"specularIntensities"),this.positionAttribute=p.shader.getAttribute(this.gl,"position"),this.normalAttribute=p.shader.getAttribute(this.gl,"normal"),this.colorAttribute=p.shader.getAttribute(this.gl,"color"),this.texCoordAttribute=p.shader.getAttribute(this.gl,"texCoord")}draw(t,e,s,r){if(!this.visible||t.triangleCount==0)return;this.initialize(),this.gl.useProgram(p.shader.getProgram());const a=new m;a.applyMatrix(s.getWorldMatrix()),this.gl.uniform3f(this.eyePositionUniform,a.x,a.y,a.z),this.gl.uniformMatrix4fv(this.modelUniform,!1,e.getWorldMatrix().mat),this.gl.uniformMatrix4fv(this.viewUniform,!1,s.getViewMatrix().mat),this.gl.uniformMatrix4fv(this.projectionUniform,!1,s.getProjectionMatrix().mat),this.gl.uniformMatrix4fv(this.normalUniform,!1,e.getWorldMatrix().inverse().transpose().mat),this.gl.uniform3f(this.kAmbientUniform,this.ambientColor.r,this.ambientColor.g,this.ambientColor.b),this.gl.uniform3f(this.kDiffuseUniform,this.diffuseColor.r,this.diffuseColor.g,this.diffuseColor.b),this.gl.uniform3f(this.kSpecularUniform,this.specularColor.r,this.specularColor.g,this.specularColor.b),this.gl.uniform1f(this.shininessUniform,this.shininess),this.gl.uniform1i(this.numLightsUniform,r.getNumLights()),this.gl.uniform1iv(this.lightTypesUniform,r.lightTypes),this.gl.uniform3fv(this.lightPositionsUniform,r.lightPositions),this.gl.uniform3fv(this.ambientIntensitiesUniform,r.ambientIntensities),this.gl.uniform3fv(this.diffuseIntensitiesUniform,r.diffuseIntensities),this.gl.uniform3fv(this.specularIntensitiesUniform,r.specularIntensities),this.gl.enableVertexAttribArray(this.positionAttribute),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,t.positionBuffer),this.gl.vertexAttribPointer(this.positionAttribute,3,this.gl.FLOAT,!1,0,0),this.gl.enableVertexAttribArray(this.normalAttribute),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,t.normalBuffer),this.gl.vertexAttribPointer(this.normalAttribute,3,this.gl.FLOAT,!1,0,0),this.gl.enableVertexAttribArray(this.colorAttribute),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,t.colorBuffer),this.gl.vertexAttribPointer(this.colorAttribute,4,this.gl.FLOAT,!1,0,0),this.texture?(this.gl.uniform1i(this.useTextureUniform,1),this.gl.activeTexture(this.gl.TEXTURE0+this.texture.id),this.gl.bindTexture(this.gl.TEXTURE_2D,this.texture.texture),this.gl.uniform1i(this.textureUniform,this.texture.id),this.gl.enableVertexAttribArray(this.texCoordAttribute),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,t.texCoordBuffer),this.gl.vertexAttribPointer(this.texCoordAttribute,2,this.gl.FLOAT,!1,0,0)):this.gl.uniform1i(this.useTextureUniform,0),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,t.indexBuffer),this.gl.drawElements(this.gl.TRIANGLES,t.triangleCount*3,this.gl.UNSIGNED_SHORT,0)}};let T=p;n(T,"shader",new O(ht,ot));class W extends L{constructor(){super();n(this,"gl");n(this,"positionBuffer");n(this,"normalBuffer");n(this,"colorBuffer");n(this,"indexBuffer");n(this,"texCoordBuffer");n(this,"positionBufferDirty");n(this,"normalBufferDirty");n(this,"colorBufferDirty");n(this,"indexBufferDirty");n(this,"texCoordBufferDirty");n(this,"vertexCount");n(this,"triangleCount");n(this,"material");this.gl=F.getInstance().renderer.gl,this.positionBuffer=this.gl.createBuffer(),this.normalBuffer=this.gl.createBuffer(),this.colorBuffer=this.gl.createBuffer(),this.indexBuffer=this.gl.createBuffer(),this.texCoordBuffer=this.gl.createBuffer(),this.positionBufferDirty=!1,this.normalBufferDirty=!1,this.colorBufferDirty=!1,this.indexBufferDirty=!1,this.texCoordBufferDirty=!1,this.vertexCount=0,this.triangleCount=0,this.material=new T}draw(t,e,s){!this.visible||(this.material.draw(this,this,e,s),this.children.forEach(r=>{r.draw(this,e,s)}))}postRender(){this.positionBufferDirty=!1,this.normalBufferDirty=!1,this.colorBufferDirty=!1,this.indexBufferDirty=!1,this.children.forEach(t=>{t.postRender()})}setVertices(t){if(t.length>0){if(this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.positionBuffer),typeof t[0]=="number")this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(t),this.gl.DYNAMIC_DRAW),this.vertexCount=t.length/3;else{const e=[];t.forEach(s=>{e.push(s.x,s.y,s.z)}),this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(e),this.gl.DYNAMIC_DRAW),this.vertexCount=t.length}this.positionBufferDirty=!0}}setNormals(t){if(t.length>0){if(this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.normalBuffer),typeof t[0]=="number")this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(t),this.gl.DYNAMIC_DRAW);else{const e=[];t.forEach(s=>{e.push(s.x,s.y,s.z)}),this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(e),this.gl.DYNAMIC_DRAW)}this.normalBufferDirty=!0}}setColors(t){if(t.length>0){if(this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.colorBuffer),typeof t[0]=="number")this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(t),this.gl.DYNAMIC_DRAW);else{const e=[];t.forEach(s=>{e.push(s.r,s.g,s.b,s.a)}),this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(e),this.gl.DYNAMIC_DRAW)}this.colorBufferDirty=!0}}setTextureCoordinates(t){if(t.length>0){if(this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.texCoordBuffer),typeof t[0]=="number")this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(t),this.gl.DYNAMIC_DRAW);else{const e=[];t.forEach(s=>{e.push(s.x,s.y)}),this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(e),this.gl.DYNAMIC_DRAW)}this.texCoordBufferDirty=!0}}setIndices(t){if(t.length>0){if(this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer),typeof t[0]=="number")this.triangleCount=t.length/3,this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,new Uint16Array(t),this.gl.DYNAMIC_DRAW);else{this.triangleCount=t.length;const e=[];t.forEach(s=>{e.push(s.x,s.y,s.z)}),this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,new Uint16Array(e),this.gl.DYNAMIC_DRAW)}this.indexBufferDirty=!0}}setArrayBuffer(t,e){if(t.length>0)if(this.gl.bindBuffer(this.gl.ARRAY_BUFFER,e),typeof t[0]=="number")this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(t),this.gl.DYNAMIC_DRAW);else{const s=[];t.forEach(r=>{s.push(r.x,r.y,r.z)}),this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(s),this.gl.DYNAMIC_DRAW)}}getVertices(){const t=new Float32Array(this.vertexCount*3);return this.gl.bindBuffer(this.gl.COPY_READ_BUFFER,this.positionBuffer),this.gl.getBufferSubData(this.gl.COPY_READ_BUFFER,0,t),[...t]}getNormals(){const t=new Float32Array(this.vertexCount*3);return this.gl.bindBuffer(this.gl.COPY_READ_BUFFER,this.normalBuffer),this.gl.getBufferSubData(this.gl.COPY_READ_BUFFER,0,t),[...t]}getColors(){const t=new Float32Array(this.vertexCount*4);return this.gl.bindBuffer(this.gl.COPY_READ_BUFFER,this.colorBuffer),this.gl.getBufferSubData(this.gl.COPY_READ_BUFFER,0,t),[...t]}getTextureCoordinates(){const t=new Float32Array(this.vertexCount*2);return this.gl.bindBuffer(this.gl.COPY_READ_BUFFER,this.texCoordBuffer),this.gl.getBufferSubData(this.gl.COPY_READ_BUFFER,0,t),[...t]}getIndices(){const t=new Uint16Array(this.triangleCount*3);return this.gl.bindBuffer(this.gl.COPY_READ_BUFFER,this.indexBuffer),this.gl.getBufferSubData(this.gl.COPY_READ_BUFFER,0,t),[...t]}getArrayBuffer(t){const e=new Float32Array(this.vertexCount*3);return this.gl.bindBuffer(this.gl.COPY_READ_BUFFER,t),this.gl.getBufferSubData(this.gl.COPY_READ_BUFFER,0,e),[...e]}createDefaultVertexColors(){const t=[];for(let e=0;e<this.vertexCount;e++)t.push(1,1,1,1);this.setColors(t)}}class H extends W{constructor(t=1,e=1,s=1){super();n(this,"width");n(this,"height");n(this,"depth");this.width=t,this.height=e,this.depth=s,this.createVertices(this.width,this.height,this.depth),this.createNormals(),this.createTextureCoords(),this.createIndices(),this.createDefaultVertexColors()}createVertices(t,e,s){const r=[];r.push(-t/2,-e/2,s/2),r.push(t/2,-e/2,s/2),r.push(t/2,e/2,s/2),r.push(-t/2,e/2,s/2),r.push(-t/2,-e/2,-s/2),r.push(t/2,-e/2,-s/2),r.push(t/2,e/2,-s/2),r.push(-t/2,e/2,-s/2),r.push(-t/2,-e/2,-s/2),r.push(-t/2,-e/2,s/2),r.push(-t/2,e/2,s/2),r.push(-t/2,e/2,-s/2),r.push(t/2,-e/2,-s/2),r.push(t/2,-e/2,s/2),r.push(t/2,e/2,s/2),r.push(t/2,e/2,-s/2),r.push(-t/2,e/2,s/2),r.push(t/2,e/2,s/2),r.push(t/2,e/2,-s/2),r.push(-t/2,e/2,-s/2),r.push(-t/2,-e/2,s/2),r.push(t/2,-e/2,s/2),r.push(t/2,-e/2,-s/2),r.push(-t/2,-e/2,-s/2),this.setVertices(r)}createNormals(){const t=[];t.push(0,0,1),t.push(0,0,1),t.push(0,0,1),t.push(0,0,1),t.push(0,0,-1),t.push(0,0,-1),t.push(0,0,-1),t.push(0,0,-1),t.push(-1,0,0),t.push(-1,0,0),t.push(-1,0,0),t.push(-1,0,0),t.push(1,0,0),t.push(1,0,0),t.push(1,0,0),t.push(1,0,0),t.push(0,1,0),t.push(0,1,0),t.push(0,1,0),t.push(0,1,0),t.push(0,-1,0),t.push(0,-1,0),t.push(0,-1,0),t.push(0,-1,0),this.setNormals(t)}createIndices(){const t=[];t.push(0,1,2),t.push(2,3,0),t.push(4,6,5),t.push(6,4,7),t.push(8,9,10),t.push(10,11,8),t.push(12,14,13),t.push(14,12,15),t.push(16,17,18),t.push(18,19,16),t.push(20,22,21),t.push(22,20,23),this.setIndices(t)}createTextureCoords(){const t=[];t.push(0,1),t.push(1,1),t.push(1,0),t.push(0,0),t.push(1,1),t.push(0,1),t.push(0,0),t.push(1,0),t.push(0,1),t.push(1,1),t.push(1,0),t.push(0,0),t.push(1,1),t.push(0,1),t.push(0,0),t.push(1,0),t.push(0,1),t.push(1,1),t.push(1,0),t.push(0,0),t.push(1,1),t.push(0,1),t.push(0,0),t.push(1,0),this.setTextureCoordinates(t)}}class k extends W{constructor(t=1,e=3){super();n(this,"radius");n(this,"subdivisions");this.radius=t,this.subdivisions=e,this.createSphere(this.radius,this.subdivisions)}createSphere(t,e){let s=[],r=[];const a=[],o=[],l=(1+Math.sqrt(5))*.5,u=1,f=1/l;s.push(new m(0,f,-u)),s.push(new m(f,u,0)),s.push(new m(-f,u,0)),s.push(new m(0,f,u)),s.push(new m(0,-f,u)),s.push(new m(-u,0,f)),s.push(new m(0,-f,-u)),s.push(new m(u,0,-f)),s.push(new m(u,0,f)),s.push(new m(-u,0,-f)),s.push(new m(f,-u,0)),s.push(new m(-f,-u,0));for(let h=0;h<s.length;h++)s[h].normalize();r.push(2,1,0),r.push(1,2,3),r.push(5,4,3),r.push(4,8,3),r.push(7,6,0),r.push(6,9,0),r.push(11,10,4),r.push(10,11,6),r.push(9,5,2),r.push(5,9,11),r.push(8,7,1),r.push(7,8,10),r.push(2,5,3),r.push(8,1,3),r.push(9,2,0),r.push(1,7,0),r.push(11,9,6),r.push(7,10,6),r.push(5,11,4),r.push(10,8,4);for(let h=0;h<e;h++){const R=[];for(let w=0;w<r.length/3;w++){const y=w*3,E=this.createCentroids(s,r[y],r[y+1],r[y+2]);s.push(...E);const D=this.subdivide(r[y],r[y+1],r[y+2],s.length-3,s.length-2,s.length-1);R.push(...D)}r=R}for(let h=0;h<s.length;h++)s[h].multiplyScalar(t);[s,r]=this.mergeSharedVertices(s,r);for(let h=0;h<s.length;h++){a.push(m.normalize(s[h]));const R=1-(s[h].y+t)/(2*t),w=new m(s[h].x,0,s[h].z);w.normalize();let y=Math.acos(m.FORWARD.dot(w));w.x>0&&(y=Math.PI*2-y);const E=y/(Math.PI*2);o.push(E,R)}const A=r.length;for(let h=0;h<A;h+=3)this.isSeamVertex(h,s,r)?this.isEndVertex(h+1,s,r)&&this.isEndVertex(h+2,s,r)?(s.push(m.copy(s[r[h]])),a.push(m.normalize(s[r[h]])),o.push(1,o[r[h]*2+1]),r[h]=s.length-1):this.isEndVertex(h+1,s,r)?(s.push(m.copy(s[r[h]])),a.push(m.normalize(s[r[h]])),o.push(1,o[r[h]*2+1]),s.push(m.copy(s[r[h+2]])),a.push(m.normalize(s[r[h+2]])),o.push(1,o[r[h+2]*2+1]),r[h]=s.length-2,r[h+2]=s.length-1):this.isEndVertex(h+2,s,r)&&(s.push(m.copy(s[r[h]])),a.push(m.normalize(s[r[h]])),o.push(1,o[r[h]*2+1]),s.push(m.copy(s[r[h+1]])),a.push(m.normalize(s[r[h+1]])),o.push(1,o[r[h+1]*2+1]),r[h]=s.length-2,r[h+1]=s.length-1):this.isSeamVertex(h+1,s,r)?this.isEndVertex(h,s,r)&&this.isEndVertex(h+2,s,r)?(s.push(m.copy(s[r[h+1]])),a.push(m.normalize(s[r[h+1]])),o.push(1,o[r[h+1]*2+1]),r[h+1]=s.length-1):this.isEndVertex(h,s,r)?(s.push(m.copy(s[r[h+1]])),a.push(m.normalize(s[r[h+1]])),o.push(1,o[r[h+1]*2+1]),s.push(m.copy(s[r[h+2]])),a.push(m.normalize(s[r[h+2]])),o.push(1,o[r[h+2]*2+1]),r[h+1]=s.length-2,r[h+2]=s.length-1):this.isEndVertex(h+2,s,r)&&(s.push(m.copy(s[r[h]])),a.push(m.normalize(s[r[h]])),o.push(1,o[r[h]*2+1]),s.push(m.copy(s[r[h+1]])),a.push(m.normalize(s[r[h+1]])),o.push(1,o[r[h+1]*2+1]),r[h]=s.length-2,r[h+1]=s.length-1):this.isSeamVertex(h+2,s,r)&&(this.isEndVertex(h,s,r)&&this.isEndVertex(h+1,s,r)?(s.push(m.copy(s[r[h+2]])),a.push(m.normalize(s[r[h+2]])),o.push(1,o[r[h+2]*2+1]),r[h+2]=s.length-1):this.isEndVertex(h,s,r)?(s.push(m.copy(s[r[h+1]])),a.push(m.normalize(s[r[h+1]])),o.push(1,o[r[h+1]*2+1]),s.push(m.copy(s[r[h+2]])),a.push(m.normalize(s[r[h+2]])),o.push(1,o[r[h+2]*2+1]),r[h+1]=s.length-2,r[h+2]=s.length-1):this.isEndVertex(h+1,s,r)&&(s.push(m.copy(s[r[h]])),a.push(m.normalize(s[r[h]])),o.push(1,o[r[h]*2+1]),s.push(m.copy(s[r[h+2]])),a.push(m.normalize(s[r[h+2]])),o.push(1,o[r[h+2]*2+1]),r[h]=s.length-2,r[h+2]=s.length-1));this.setVertices(s),this.setNormals(a),this.setTextureCoordinates(o),this.setIndices(r),this.createDefaultVertexColors()}isEndVertex(t,e,s){return e[s[t]].x>0}isSeamVertex(t,e,s){return e[s[t]].x==0&&e[s[t]].z<=0}createCentroids(t,e,s,r){const a=[],o=m.add(t[e],t[s]);o.divideScalar(2),o.normalize(),a.push(o);const l=m.add(t[s],t[r]);l.divideScalar(2),l.normalize(),a.push(l);const u=m.add(t[r],t[e]);return u.divideScalar(2),u.normalize(),a.push(u),a}subdivide(t,e,s,r,a,o){const l=[];return l.push(t,r,o),l.push(e,a,r),l.push(s,o,a),l.push(r,a,o),l}mergeSharedVertices(t,e){const s=[],r=[];e.forEach(a=>{r.push(a)});for(let a=0;a<t.length;a++){let o=!1;for(let l=0;l<s.length;l++)if(t[a].equals(s[l])){for(let u=0;u<e.length;u++)e[u]==a&&(r[u]=l);o=!0}if(!o){s.push(t[a]);for(let l=0;l<e.length;l++)e[l]==a&&(r[l]=s.length-1)}}return[s,r]}}class mt extends W{constructor(t=1,e=1){super();n(this,"width");n(this,"height");this.width=t,this.height=e,this.createVertices(this.width,this.height),this.createNormals(),this.createTextureCoords(),this.createIndices(),this.createDefaultVertexColors()}createVertices(t,e){const s=[];s.push(-t/2,-e/2,0),s.push(t/2,-e/2,0),s.push(t/2,e/2,0),s.push(-t/2,e/2,0),this.setVertices(s)}createNormals(){const t=[];t.push(0,0,-1),t.push(0,0,-1),t.push(0,0,-1),t.push(0,0,-1),this.setNormals(t)}createIndices(){const t=[];t.push(0,2,1),t.push(2,0,3),this.setIndices(t)}createTextureCoords(){const t=[];t.push(1,1),t.push(0,1),t.push(0,0),t.push(1,0),this.setTextureCoordinates(t)}}var V=(c=>(c[c.POINT=0]="POINT",c[c.DIRECTIONAL=1]="DIRECTIONAL",c))(V||{});class G extends L{constructor(t=0,e=new x,s=new x,r=new x){super();n(this,"ambientIntensity");n(this,"diffuseIntensity");n(this,"specularIntensity");n(this,"type");this.type=t,this.ambientIntensity=e,this.diffuseIntensity=s,this.specularIntensity=r}getType(){return this.type}setLights(t){t.addLight(this),super.setLights(t)}}class lt extends G{constructor(i=new x(.5,.5,.5)){super(V.POINT,i,new x(0,0,0),new x(0,0,0))}}class ut extends G{constructor(i=new x(.5,.5,.5)){super(V.DIRECTIONAL,new x(0,0,0),i,i)}}var ct=`#version 300 es

precision mediump float;

uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;

in vec3 position;

void main() 
{
    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1);
}`,ft=`#version 300 es

precision mediump float;

uniform vec4 color;

out vec4 fragColor;

void main() 
{
    fragColor = color;
}`;const C=class extends N{constructor(){super();n(this,"color");n(this,"wireframeBuffers");n(this,"positionAttribute");n(this,"modelViewUniform");n(this,"projectionUniform");n(this,"colorUniform");this.color=new M(1,1,1,1),this.wireframeBuffers=new Map,C.shader.initialize(this.gl),this.positionAttribute=C.shader.getAttribute(this.gl,"position"),this.modelViewUniform=C.shader.getUniform(this.gl,"modelViewMatrix"),this.projectionUniform=C.shader.getUniform(this.gl,"projectionMatrix"),this.colorUniform=C.shader.getUniform(this.gl,"color")}draw(t,e,s,r){!this.visible||t.triangleCount==0||(this.initialize(),this.gl.useProgram(C.shader.getProgram()),this.gl.uniformMatrix4fv(this.modelViewUniform,!1,z.multiply(e.getWorldMatrix(),s.getViewMatrix()).mat),this.gl.uniformMatrix4fv(this.projectionUniform,!1,s.getProjectionMatrix().mat),this.gl.uniform4f(this.colorUniform,this.color.r,this.color.g,this.color.b,this.color.a),this.gl.enableVertexAttribArray(this.positionAttribute),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,t.positionBuffer),this.gl.vertexAttribPointer(this.positionAttribute,3,this.gl.FLOAT,!1,0,0),(!this.wireframeBuffers.get(t)||t.positionBufferDirty)&&this.updateWireframeBuffer(t),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.wireframeBuffers.get(t)),this.gl.drawElements(this.gl.LINES,t.triangleCount*6,this.gl.UNSIGNED_SHORT,0))}updateWireframeBuffer(t){let e;e=this.wireframeBuffers.get(t),e||(e=this.gl.createBuffer(),e&&this.wireframeBuffers.set(t,e));const s=new Uint16Array(t.triangleCount*3);this.gl.bindBuffer(this.gl.COPY_READ_BUFFER,t.indexBuffer),this.gl.getBufferSubData(this.gl.COPY_READ_BUFFER,0,s);const r=[...s],a=[];for(let o=0;o<t.triangleCount;o++)a.push(r[o*3]),a.push(r[o*3+1]),a.push(r[o*3+1]),a.push(r[o*3+2]),a.push(r[o*3+2]),a.push(r[o*3]);this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,e),this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,new Uint16Array(a),this.gl.DYNAMIC_DRAW)}};let Y=C;n(Y,"shader",new O(ct,ft));var dt=`#version 300 es

precision mediump float;

uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;

in vec3 position;
in vec2 texCoord;

out vec2 uv;

void main() 
{
    uv = texCoord.xy;
    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1);
}`,gt=`#version 300 es

precision mediump float;

uniform vec3 color;
uniform int useTexture;
uniform sampler2D textureImage;

in vec2 uv;

out vec4 fragColor;

void main() 
{
    fragColor = vec4(color, 1);

    if(useTexture != 0)
    {
        fragColor *= texture(textureImage, uv);
    }
}`;const U=class extends N{constructor(){super();n(this,"texture");n(this,"color");n(this,"colorUniform");n(this,"textureUniform");n(this,"useTextureUniform");n(this,"modelViewUniform");n(this,"projectionUniform");n(this,"positionAttribute");n(this,"texCoordAttribute");this.texture=null,this.color=new x(1,1,1),U.shader.initialize(this.gl),this.colorUniform=U.shader.getUniform(this.gl,"color"),this.textureUniform=U.shader.getUniform(this.gl,"textureImage"),this.useTextureUniform=U.shader.getUniform(this.gl,"useTexture"),this.modelViewUniform=U.shader.getUniform(this.gl,"modelViewMatrix"),this.projectionUniform=U.shader.getUniform(this.gl,"projectionMatrix"),this.positionAttribute=U.shader.getAttribute(this.gl,"position"),this.texCoordAttribute=U.shader.getAttribute(this.gl,"texCoord")}draw(t,e,s,r){!this.visible||t.triangleCount==0||(this.initialize(),this.gl.useProgram(U.shader.getProgram()),this.gl.uniformMatrix4fv(this.modelViewUniform,!1,z.multiply(e.getWorldMatrix(),s.getViewMatrix()).mat),this.gl.uniformMatrix4fv(this.projectionUniform,!1,s.getProjectionMatrix().mat),this.gl.uniform3f(this.colorUniform,this.color.r,this.color.g,this.color.b),this.gl.enableVertexAttribArray(this.positionAttribute),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,t.positionBuffer),this.gl.vertexAttribPointer(this.positionAttribute,3,this.gl.FLOAT,!1,0,0),this.texture?(this.gl.uniform1i(this.useTextureUniform,1),this.gl.activeTexture(this.gl.TEXTURE0+this.texture.id),this.gl.bindTexture(this.gl.TEXTURE_2D,this.texture.texture),this.gl.uniform1i(this.textureUniform,this.texture.id),this.gl.enableVertexAttribArray(this.texCoordAttribute),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,t.texCoordBuffer),this.gl.vertexAttribPointer(this.texCoordAttribute,2,this.gl.FLOAT,!1,0,0)):this.gl.uniform1i(this.useTextureUniform,0),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,t.indexBuffer),this.gl.drawElements(this.gl.TRIANGLES,t.triangleCount*3,this.gl.UNSIGNED_SHORT,0))}};let P=U;n(P,"shader",new O(dt,gt));class pt extends F{constructor(){super();n(this,"ground");n(this,"sky");n(this,"box");n(this,"sphere");n(this,"line");n(this,"marker");this.ground=new mt(1e3,1e3),this.sky=new k(500),this.box=new H,this.sphere=new k(.5),this.line=new H(.01,.01,100),this.marker=new k(.1)}createScene(){this.camera=new it(5,60,1920/1080,.1,1e3);const t=new lt(new x(.5,.5,.5));this.scene.add(t);const e=new ut(new x(.6,.6,.6));e.position.set(10,0,0),this.scene.add(e);const s=new T;s.ambientColor.set(.425,.9,.555),this.ground.material=s,this.ground.position.set(0,-1,0),this.ground.rotation.setEulerAngles(0,Math.PI/2,0),this.scene.add(this.ground);const r=new P;r.side=K.BACK,r.color.set(.529,.807,.921),this.sky.material=r,this.scene.add(this.sky);const a=new T;a.ambientColor.set(0,0,1),a.specularColor.set(1,1,1),this.box.material=a,this.box.translateX(-2),this.box.rotation.setEulerAngles(Math.PI,0,0),this.scene.add(this.box),this.sphere.material=a,this.sphere.translateX(2),this.scene.add(this.sphere);const o=new P;o.color.set(1,0,1),this.line.material=o,this.line.visible=!1,this.scene.add(this.line);const l=new T;l.ambientColor.set(1,0,0),l.diffuseColor.set(1,0,0),this.marker.material=l,this.marker.visible=!1,this.scene.add(this.marker)}update(t){}onMouseDown(t){const e=this.renderer.getNormalizedDeviceCoordinates(t.x,t.y),s=new et;s.setPickRay(e,this.camera),this.line.visible=!0,this.line.position.copy(s.ray.origin),this.line.lookAt(m.add(s.ray.origin,s.ray.direction)),this.line.translateZ(this.line.depth/-2+-1),this.marker.visible=!1;const r=new nt(this.sphere.position,this.sphere.radius),a=s.intersectsSphere(r);if(a){this.marker.position.copy(a),this.marker.visible=!0;return}const o=this.box.position.clone();o.x-=this.box.width/2,o.y-=this.box.height/2,o.z-=this.box.depth/2;const l=this.box.position.clone();l.x+=this.box.width/2,l.y+=this.box.height/2,l.z+=this.box.depth/2;const u=new rt(o,l),f=s.intersectsBox(u);if(f){this.marker.position.copy(f),this.marker.visible=!0;return}const A=new at(this.ground.position,m.UP),h=s.intersectsPlane(A);if(h){this.marker.position.copy(h),this.marker.visible=!0;return}}}const xt=new pt;xt.start();
